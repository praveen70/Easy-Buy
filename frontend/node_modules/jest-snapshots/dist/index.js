'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _path = require('path');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _reactDisplayName = require('react-display-name');

var _reactDisplayName2 = _interopRequireDefault(_reactDisplayName);

var _lodash = require('lodash.foreach');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactFakeProps = require('react-fake-props');

var _reactFakeProps2 = _interopRequireDefault(_reactFakeProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var snapshots = function snapshots(Component, propSets) {
  var fakePropsOptions = void 0;
  var isMount = void 0;

  if (Array.isArray(Component)) {
    Component = _path.join.apply(undefined, _toConsumableArray(Component));
  }

  if ((typeof Component === 'undefined' ? 'undefined' : _typeof(Component)) === 'object') {
    var options = Component;
    Component = options.component;
    propSets = options.props;
    fakePropsOptions = options.fakePropsOptions;
    isMount = options.mount;
  }

  if (typeof Component === 'string') {
    Component = Component.match(/[jt]sx?$/) ? Component : Component + '.js';
  } else {
    propSets = propSets || [{}];
  }

  if (!propSets) {
    var props = (0, _reactFakeProps2.default)(Component, fakePropsOptions);
    propSets = {
      'fake props': props
    };
  }

  if (typeof Component === 'string') {
    Component = require(Component);
    Component = Component.default || Component;
  }

  var fn = isMount ? _enzyme.mount : _enzyme.shallow;

  describe((0, _reactDisplayName2.default)(Component) + ' snapshots', function () {
    (0, _lodash2.default)(propSets, function (props, name) {
      it('' + name, function () {
        expect(fn(_react2.default.createElement(Component, props))).toMatchSnapshot();
      });
    });
  });
};

exports.default = snapshots;
